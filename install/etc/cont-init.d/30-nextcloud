#!/usr/bin/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="nextcloud"

check_service_initialized init 20-php-fpm

if [ "$ENABLE_FILESYSTEM_CHECK_CHANGES" = "TRUE" ]; then
  ENABLE_FILESYSTEM_CHECK_CHANGES="1"
else
  ENABLE_FILESYSTEM_CHECK_CHANGES="0"
fi

# return true if specified directory is empty
directory_empty() {
    [ -n "$(find "$1"/ -prune -empty)" ]
}

update_config() {
# Update config.php.
  CONFIG_TEMP=$(/bin/mktemp)
  sudo -u "${NGINX_USER}" php <<EOF > "$CONFIG_TEMP" && chown "${NGINX_USER}":"${NGINX_GROUP}" "$CONFIG_TEMP" && mv "$CONFIG_TEMP" "$CONFIG_FILE"
<?php
include("${NGINX_WEBROOT}/config/config.php");
\$CONFIG['maintenance'] = false;
\$CONFIG['allow_user_to_change_display_name'] = ${ENABLE_DISPLAY_NAME_CHANGE};
\$CONFIG['appcodechecker'] = ${ENABLE_APP_CODE_CHECKER};
\$CONFIG['appstoreenabled'] = ${ENABLE_APP_STORE};
\$CONFIG['auth.bruteforce.protection.enabled'] = ${ENABLE_BRUTEFORCE_PROTECTION};
\$CONFIG['cache_chunk_gc_ttl'] = '${CACHE_CHUNK_GC_TTL}';
\$CONFIG['cache_path'] = '${CACHE_DIRECTORY}';
\$CONFIG['check_data_directory_permissions'] = true;
\$CONFIG['check_for_working_htaccess'] = false;
\$CONFIG['check_for_working_wellknown_setup'] = ${ENABLE_CHECK_WELLKNOWN};
\$CONFIG['cipher'] = '${CIPHER}';
\$CONFIG['debug'] = ${DEBUG_MODE:-FALSE};
\$CONFIG['default_language'] = '${DEFAULT_LANGUAGE}';
\$CONFIG['default_locale'] = '${DEFAULT_LOCALE}';
\$CONFIG['defaultapp'] = '${DEFAULT_APPLICATION}';
\$CONFIG['default_phone_region'] = '${ISO_CODE}';
\$CONFIG['enable_previews'] = ${ENABLE_PREVIEWS};
\$CONFIG['filelocking.debug'] = ${FILE_LOCKING_DEBUG};
\$CONFIG['filelocking.enabled'] = ${ENABLE_FILE_LOCKING};
\$CONFIG['filesystem_check_changes'] = ${ENABLE_FILESYSTEM_CHECK_CHANGES};
\$CONFIG['force_language'] = '${FORCE_LANGUAGE}';
\$CONFIG['force_locale'] = '${FORCE_LOCALE}';
\$CONFIG['forwarded_for_headers'] = array('HTTP_X_FORWARDED', 'HTTP_FORWARDED_FOR');
\$CONFIG['hashingCost'] = ${HASHING_COST};
\$CONFIG['knowledgebaseenabled'] = ${ENABLE_KNOWLEDGE_BASE};
\$CONFIG['ldapUserCleanupInterval'] = ${LDAP_CLEANUP_INTERVAL};
\$CONFIG['log_query'] = ${ENABLE_LOG_QUERY};
\$CONFIG['log_type'] = 'file';
\$CONFIG['logdateformat'] = '${LOG_DATE_FORMAT}';
\$CONFIG['logfile'] = '${LOG_DIR}/${LOG_FILE}';
\$CONFIG['logfilemode'] = 0640;
\$CONFIG['login_form_autocomplete'] = ${ENABLE_LOGIN_FORM_AUTOCOMPLETE};
\$CONFIG['loglevel'] = ${LOG_LEVEL};
\$CONFIG['logtimezone'] = '${LOG_TIMEZONE}';
\$CONFIG['mail_domain'] = '${SMTP_DOMAIN}';
\$CONFIG['mail_from_address'] = '${SMTP_FROM}';
\$CONFIG['mail_send_plaintext_only'] = ${SMTP_SEND_PLAINTEXT_ONLY};
\$CONFIG['mail_sendmailmode'] = 'smtp';
\$CONFIG['mail_smtpauth'] = ${ENABLE_SMTP_AUTHENTICATION};
\$CONFIG['mail_smtpauthtype'] = '${SMTP_AUTHENTICATION_TYPE}';
\$CONFIG['mail_smtpdebug'] = ${SMTP_DEBUG};
\$CONFIG['mail_smtphost'] = '${SMTP_HOST}';
\$CONFIG['mail_smtpmode'] = 'smtp';
\$CONFIG['mail_smtpname'] = '${SMTP_USER}';
\$CONFIG['mail_smtppassword'] = '${SMTP_PASS}';
\$CONFIG['mail_smtpport'] = ${SMTP_PORT};
\$CONFIG['mail_smtpsecure'] = '${SMTP_SECURE}';
\$CONFIG['mail_smtptimeout'] = ${SMTP_TIMEOUT};
\$CONFIG['max_filesize_animated_gifs_public_sharing'] = ${ANIMATED_GIFS_MAX_FILESIZE};
\$CONFIG['mysql.utf8mb4'] = ${ENABLE_MYSQL_UTF8MB4};
\$CONFIG['overwritehost'] = '${OVERWRITE_HOST}';
\$CONFIG['overwriteprotocol'] = '${OVERWRITE_PROTOCOL}';
\$CONFIG['part_file_in_storage'] = ${ENABLE_PARTFILE_UPLOADS_STORAGE};
\$CONFIG['preview_libreoffice_path'] = '/usr/bin/libreoffice';
\$CONFIG['preview_max_filesize_image'] = 50;
\$CONFIG['preview_max_x'] = ${PREVIEW_MAX_X};
\$CONFIG['preview_max_y'] = ${PREVIEW_MAX_Y};
\$CONFIG['session_keepalive'] = ${ENABLE_SESSION_KEEPALIVE};
\$CONFIG['share_folder'] = '${SHARE_FOLDER}';
\$CONFIG['sharing.maxAutocompleteResults'] = ${SHARING_MAX_AUTOCOMPLETE_RESULTS};
\$CONFIG['sharing.minSearchStringLength'] = ${SHARING_MIN_SEARCHSTRING_LENGTH};
\$CONFIG['sharing.enable_share_accept'] = ${SHARING_ENABLE_ACCEPT};
\$CONFIG['sharing.force_share_accept'] = ${SHARING_FORCE_ACCEPT};
\$CONFIG['sharing.enable_share_mail'] = ${SHARING_ENABLE_MAIL};
\$CONFIG['simpleSignUpLink.shown'] = ${ENABLE_SIGN_UP};
\$CONFIG['skeletondirectory'] = '${SKELETON_DIRECTORY}';
\$CONFIG['sort_groups_by_name'] = ${SORT_GROUPS_BY_NAME};
\$CONFIG['sqlite.journal_mode'] = 'DELETE';
\$CONFIG['tempdirectory'] = '${TEMP_DIRECTORY}';
\$CONFIG['theme'] = '${THEME}';
\$CONFIG['token_auth_enforced'] = ${ENABLE_TOKEN_AUTH_ENFORCED};
\$CONFIG['trashbin_retention_obligation'] = '${TRASHBIN_RETENTION}';
\$CONFIG['updatechecker'] = true;
\$CONFIG['upgrade.disable-web'] = false;
\$CONFIG['versions_retention_obligation'] = '${VERSIONS_RETENTION}';

echo "<?php\n";
echo "\\\$CONFIG = ";
var_export(\$CONFIG);

echo ";";
?>
EOF
}

# version_greater A B returns whether A > B
version_greater() {
  [[ "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1" ]];
}

sed -i -e "s#<CRON_PERIOD>#${CRON_PERIOD}#g" /assets/cron/crontab.txt
sed -i -e "s#<MEMORY_LIMIT>#${PHP_MEMORY_LIMIT}#g" /assets/cron/crontab.txt
sed -i -e "s#<USER>#${NGINX_USER}#g" /assets/cron/crontab.txt
sed -i -e "s#<WEBROOT>#${NGINX_WEBROOT}#g" /assets/cron/crontab.txt

mkdir -p "${LOG_DIR}"
touch "${LOG_DIR}"/"${LOG_FILE}"
touch "${LOG_DIR}"/"${LOG_FILE_AUDIT}"
touch "${LOG_DIR}"/"${LOG_FILE_FLOW}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${LOG_DIR}"
sed -i "s#<LOG_DIR>#${LOG_DIR}#g" /etc/logrotate.d/nextcloud

mkdir -p "${APP_DIRECTORY}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${APP_DIRECTORY}"

mkdir -p "${CACHE_DIRECTORY}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${CACHE_DIRECTORY}"

mkdir -p "${DATA_DIRECTORY}"
chown "${NGINX_USER}":"${NGINX_GROUP}" "${DATA_DIRECTORY}"

if var_true ${ENABLE_RESET_PERMISSIONS_DATA} ; then
  chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${DATA_DIRECTORY}"
fi

mkdir -p "${SKELETON_DIRECTORY}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${SKELETON_DIRECTORY}"

mkdir -p "${TEMP_DIRECTORY}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${TEMP_DIRECTORY}"

### Database Check
case "$DB_TYPE" in
    "mysql" | "mariadb" | "MYSQL" | "MARIADB" )
        DB_PORT=${DB_PORT:-3306}

        sanity_db mariadb
        db_ready mariadb

        install_options="--database=mysql --database-host=${DB_HOST} --database-name=${DB_NAME} --database-user=${DB_USER} --database-pass=${DB_PASS} --database-table-space=${DB_PREFIX} --database-port=${DB_PORT}"
     ;;
    "sqlite" | "SQLITE" | "sqlite3" | "SQLITE3" )
        DB_TYPE="sqlite3"
        install_options="--database-name $SQLITE_DATABASE"
     ;;
    "postgres" | "postgresql" | "POSTGRES" | "POSTGRESQL" )
        DB_PORT=${DB_PORT:-5432}
        sanity_db
        db_ready postgres
        install_options="--database=pgsql --database-host=${DB_HOST} --database-name=${DB_NAME} --database-user=${DB_USER} --database-pass=${DB_PASS} --database-table-space=${DB_PREFIX} --database-port=${DB_PORT}"
     ;;
   *)
        print_error "Unknown DB_TYPE Variable - Exiting"
        exit 1
     ;;
esac

### Sudo Hack for entering inside the container
echo "alias occ='sudo -u ${NGINX_USER} php ${NGINX_WEBROOT}/occ'" > /root/.bashrc

mkdir -p "${NGINX_WEBROOT}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"

installed_version="0.0.0~unknown"

rsync -a --delete --exclude /config/ --exclude /data/ --exclude /custom-apps/ --exclude /themes/ /assets/nextcloud/ "${NGINX_WEBROOT}"/
mkdir -p "${NGINX_WEBROOT}"/data "${NGINX_WEBROOT}"/config "${NGINX_WEBROOT}"/themes "${NGINX_WEBROOT}"/custom-apps
chown -R nginx "${NGINX_WEBROOT}"

for dir in config themes; do
    if directory_empty "${NGINX_WEBROOT}"/"$dir"; then
        cp -arT /assets/nextcloud/"$dir" "${NGINX_WEBROOT}"/"$dir"
    fi
done

if [ "${APP_DIRECTORY}" != "${NGINX_WEBROOT}/custom-apps}" ]; then
    rm -rf ${NGINX_WEBROOT}/custom-apps
    ln -sf ${APP_DIRECTORY} ${NGINX_WEBROOT}/custom-apps
fi

if directory_empty "${APP_DIRECTORY}"; then
    cp -arT /assets/nextcloud/custom-apps "${APP_DIRECTORY}"
fi

if [ -f "${DATA_DIRECTORY}/.version" ]; then
    installed_version=$(head -n 1 "${DATA_DIRECTORY}"/.version | awk '{print $1'})
fi

if version_greater "$installed_version" "${NEXTCLOUD_VERSION}"; then
    print_error "Can't start Nextcloud because the version of the data ($installed_version) is higher than the docker image version (${NEXTCLOUD_VERSION}) and downgrading is not supported. Are you sure you have pulled the newest image version?"
    exit 1
fi

if [ "$ENABLE_AUTO_UPGRADE" = "TRUE" ]; then
  if version_greater "${NEXTCLOUD_VERSION}" "$installed_version"; then
      if [ "$installed_version" != "0.0.0~unknown" ]; then
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ app:list > /tmp/list_before
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ upgrade
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ db:add-missing-indices
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ app:list > /tmp/list_after
        echo "${NEXTCLOUD_VERSION} automatically upgraded on $(date)" | cat - "${DATA_DIRECTORY}"/.version > /tmp/.version && mv /tmp/.version "${DATA_DIRECTORY}"/.version
        print_warn "The following apps have beed disabled:"
        diff <(sed -n "/Enabled:/,/Disabled:/p" /tmp/list_before) <(sed -n "/Enabled:/,/Disabled:/p" /tmp/list_after) | grep '<' | cut -d- -f2 | cut -d: -f1
        rm -f /tmp/list_before /tmp/list_after
      fi
  fi
fi

### Check to see if this is a new install, if yes create directories...
if [ ! -f "${NGINX_WEBROOT}"/config/config.php ]; then
  print_warn "New Installation Detected"

  sanity_var ADMIN_USER "Administrative User"
  sanity_var ADMIN_PASS "Administrative Password"

  chown -R "${NGINX_USER}":"${NGINX_GROUP}" /www
  chown -R "${NGINX_USER}":"${NGINX_GROUP}" /assets/nextcloud

  # Create an initial configuration file.
  instanceid=nc$(dd if=/dev/urandom bs=1 count=40 2>/dev/null | sha1sum | fold -w 10 | head -n 1)

  cat > "$CONFIG_FILE" <<EOF;
<?php
\$CONFIG = array (
  'instanceid' => '$instanceid',
  'datadirectory' => '${DATA_DIRECTORY}',

  "apps_paths" => array (
      0 => array (
              "path"     => "${NGINX_WEBROOT}/apps",
              "url"      => "/apps",
              "writable" => false,
      ),
      1 => array (
              "path"     => "${APP_DIRECTORY}",
              "url"      => "/custom-apps",
              "writable" => true,
      ),
  ),
);
?>
EOF

  print_warn "Starting automatic configuration for Nextcloud version ${NEXTCLOUD_VERSION}"
  chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
  silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ maintenance:install \
                                                    -n -q \
                                                    --admin-user "${ADMIN_USER}" \
                                                    --admin-pass "${ADMIN_PASS}" \
                                                    --data-dir="${DATA_DIRECTORY}" \
                                                    $install_options
  rm -rf "${NGINX_WEBROOT}"/config/CAN_INSTALL
  print_warn "Automatic configuration finished."
  chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/

  # Enable/disable apps. Note that this must be done after the Nextcloud setup.
  silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ app:disable firstrunwizard
  echo "${NEXTCLOUD_VERSION} first installed on $(date)" > "${DATA_DIRECTORY}"/.version
fi

update_config

if [ -n "${ADMIN_MEMBERS}" ]; then
  admin_users=$(echo "$ADMIN_MEMBERS" | tr "," "\n")
  for admin_user in $admin_users
    do
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ group:adduser admin $admin_user
        print_warn "Added '$admin_user' to admin group"
  done
fi

if var_false "${ENABLE_CRON}" ; then
  silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ background:ajax
else
  silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/occ background:cron
fi

### Set Audit Logfile location
silent sudo -u ${NGINX_USER} php /www/nextcloud/occ config:app:set admin_audit logfile --value=${LOG_DIR}/${LOG_FILE_AUDIT}

### Set Trusted Domains
tindex=1
trusted_domains=$(echo "$TRUSTED_DOMAINS" | tr "," "\n")
for domain in ${trusted_domains} ; do
    domain=$(echo "$domain" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
    silent sudo -u "${NGINX_USER}" php /www/nextcloud/occ config:system:set trusted_domains $tindex --value="${domain}"
    (( tindex+=1 ))
done

### Set Trusted Proxies
silent sudo -u "${NGINX_USER}" php /www/nextcloud/occ config:system:set trusted_proxies 0 --value="127.0.0.1"
tindex=1
trusted_proxies=$(echo "$TRUSTED_PROXIES" | tr "," "\n")
for proxy in ${trusted_proxies} ; do
    silent sudo -u "${NGINX_USER}" php /www/nextcloud/occ config:system:set trusted_proxies $tindex --value="${proxy}"
    (( tindex+=1 ))
done

### Adjust source to allow Iframes (optional)
if [ -n "${IFRAME_DOMAINS}" ] ; then
  iframe_domains=$(echo "$IFRAME_DOMAINS" | tr "," "\n")
  for iframe_domain in ${iframe_domains} ; do
      print_debug "Adding '${iframe_domain}' as a source to be able to load iframes"
      sed -i "/protected \$allowedFrameAncestors = \[/a\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \'${iframe_domain}\'," ${NGINX_WEBROOT}/lib/public/AppFramework/Http/ContentSecurityPolicy.php
  done
fi

### Support legacy images
if [ ! -f "${DATA_DIRECTORY}"/.version ]; then
  echo "${NEXTCLOUD_VERSION} migrated from existing install on $(date)" > "${DATA_DIRECTORY}"/.version
fi

## Copy over any custom files overtop of source
if [ -d "/assets/custom" ]; then
    print_warn "Detected Custom Source - Copying over to application"
    cp -R /assets/custom/* "${NGINX_WEBROOT}"/
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
fi

## Execute Custom Scripts
if [ -d /assets/custom-scripts/ ] ; then
    print_warn "Found Custom Scripts to Execute"
    for f in $(find /assets/custom-scripts/ -name \*.sh -type f); do
        print_warn "Running Script ${f}"
        chmod +x "${f}"
        ${f}
    done
fi

if [ -n "${ADMIN_PASS}" ] && [ -n "${ADMIN_USER}" ]; then
  export OC_PASS="${ADMIN_PASS}"
  print_debug "Resetting Admin Password"
  sudo -u ${NGINX_USER} php ${NGINX_WEBROOT}/occ user:resetpassword --password-from-env ${ADMIN_USER}
fi

### Language Fix for templates when using LibreOffice Online/Colalbora ## This needs work
#cp -R /assets/www ${NGINX_WEBROOT}

if var_true "${ENABLE_FILES_BACKEND}" ; then
  print_debug "Enabling Hi Performance Files Backend"
  apkArch="$(apk --print-arch)"
	case "$apkArch" in
		x86_64) FBArch='x86_64' ; fbproceed=true ;;
		armv7) FBArch='armv7' ; fbproceed=true ;;
		aarch64) FBArch='aarch64' ; fbproceed=true ;;
		*) echo >&2 "Can't run Files backend for: ($apkArch)"; fbproceed=false ;; \
  esac

  if var_true "${fbproceed}" ; then
    sed -i "s|<FILES_BACKEND_PROTOCOL>|${FILES_BACKEND_PROTOCOL}|g" /etc/nginx/conf.available/files_backend.snippet
    sed -i "s|<FILES_BACKEND_HOST>|${FILES_BACKEND_HOST}|g" /etc/nginx/conf.available/files_backend.snippet
    sed -i "s|<FILES_BACKEND_PORT>|${FILES_BACKEND_PORT}|g" /etc/nginx/conf.available/files_backend.snippet
  else
    rm -rf /etc/services.available/30-nextcloud-files-backend
    sed -i "/include \/etc\/nginx\/conf.available\/files_backend.snippet;/d" /etc/nginx/conf.d/default.conf
  fi
else
  print_debug "Disabling Hi Performance Files Backend"
  rm -rf /etc/services.available/30-nextcloud-files-backend
  sed -i "/include \/etc\/nginx\/conf.available\/files_backend.snippet;/d" /etc/nginx/conf.d/default.conf
fi

### Force Reset Permissions for Security
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"

### Add alias for running artisan
echo "alias occ='cd ""${NGINX_WEBROOT}""; sudo -u ""${NGINX_USER}"" php occ'" > /root/.bashrc

print_info "Nextcloud Version ${NEXTCLOUD_VERSION} ready to be accessed!"
liftoff
